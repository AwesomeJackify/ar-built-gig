---
import Layout from "../../layouts/Layout.astro";
import { getImage, Image } from "astro:assets";
import { Icon } from "astro-icon/components";

import project1Img from "../../assets/images/project1.png";
import project2Img from "../../assets/images/project2.png";
import project3Img from "../../assets/images/project3.png";

const project1BgImg = await getImage({ src: project1Img });
const project2BgImg = await getImage({ src: project2Img });
const project3BgImg = await getImage({ src: project3Img });

const projects = [
  {
    name: "Curved Deck",
    location: "Ponsonby",
    image: project2Img,
    bgImage: project2BgImg.src,
    description:
      "A residential project in the Ponsonby area that offers the very best of urban life.",
    url: "/projects/curved-deck",
  },
  {
    name: "Bathroom Reno",
    location: "Avondale",
    image: project3Img,
    bgImage: project3BgImg.src,
    description:
      "A bathroom renovation project in Avondale that showcases the best of modern design.",
    url: "/projects/bathroom-renovation",
  },
  {
    name: "Project 1",
    location: "Botany",
    image: project1Img,
    bgImage: project1BgImg.src,
    description:
      "A project in Botany that showcases the best of modern design.",
    url: "/projects/project-1",
  },
];
---

<Layout title="Projects">
  <div
    class="flex flex-col text-5xl justify-center absolute right-2 top-1/2 z-50 max-md:hidden"
  >
    <span
      class="icon-[radix-icons--caret-up] text-primary cursor-pointer hover:text-black transition"
      id="upButton"></span>
    <span
      class="icon-[radix-icons--caret-up] text-primary -scale-y-100 hover:text-black transition cursor-pointer"
      id="downButton"></span>
  </div>
  <button
    class="icon-[material-symbols--close] fixed top-4 right-4 text-black z-50 text-5xl cursor-pointer transition"
    onclick="window.history.go(-1); return false;"></button>
  <div class="h-screen overflow-hidden">
    {
      projects.map((project) => {
        return (
          <section
            class="fixed h-full top-0 left-0 w-full bg-cover flex flex-col bg-center"
            style={`background-image: url('${project.bgImage}')`}
          >
            <div class="flex flex-col justify-center h-full w-full">
              <div class="flex flex-col items-center relative gap-16 z-10 p-4 max-md:gap-8">
                <div class="w-1/3 max-md:w-11/12 aspect-square bg-[#eee6d3] max-md:text-4xl font-extralight flex items-center h-full flex-col p-8">
                  <h1 class="text-center text-xs">{project.description}</h1>
                  <div class="relative flex justify-center w-full my-auto">
                    <h1 class="absolute text-6xl -top-8 max-md:-top-6 left-1/2 -translate-x-1/2 text-center w-full">
                      {project.name}
                    </h1>
                    <Image
                      src={project.image}
                      alt={project.name}
                      class="w-1/2 object-cover aspect-[1/1.5]"
                    />
                    <h1 class="absolute text-6xl -bottom-8 max-md:-bottom-6 w-full text-center left-1/2 -translate-x-1/2">
                      in {project.location}
                    </h1>
                  </div>
                </div>
                <div class="bottom-4 w-full flex justify-center">
                  <a
                    href="#"
                    class="btn flex btn-lg items-center gap-1 btn-secondary p-4 py-3 w-fit"
                  >
                    <Icon name="fluent:tap-double-20-filled" class="text-2xl" />
                    <h1 class="capitalize font-light">Check it out</h1>
                  </a>
                </div>
              </div>
            </div>
          </section>
        );
      })
    }
  </div>
</Layout>

<script>
  import gsap from "gsap";
  import { Observer } from "gsap/Observer";

  gsap.registerPlugin(Observer);

  const sections = document.querySelectorAll("section");

  let animating: boolean;
  let currentIndex: number = -1;
  let wrap = gsap.utils.wrap(0, sections.length);
  let t1: gsap.core.Timeline = gsap.timeline({
    defaults: { duration: 1.5, ease: "power1.inOut" },
    onComplete: () => {
      animating = false;
    },
  });

  const gotoSection = (index: number, direction: number) => {
    index = wrap(index);
    animating = true;

    // Reset the zIndex and autoAlpha for all sections except the current one
    sections.forEach((section, i) => {
      if (i !== currentIndex && i !== index) {
        gsap.set(section, { zIndex: 0, autoAlpha: 0 });
      }
    });

    gsap.set(sections[currentIndex], { zIndex: 10 });
    // gsap.to(sections[currentIndex], {
    //   filter: "blur(5px)",
    //   duration: 0.5,
    // });

    gsap.set(sections[index], { autoAlpha: 1, zIndex: 20 });
    if (currentIndex == -1) {
      gsap.set(sections[index], { yPercent: 0 });
    } else {
      t1.fromTo(
        sections[index],
        { yPercent: direction * 100 },
        { yPercent: 0 }
      ).set(sections[currentIndex], { filter: "blur(0px)" });
    }

    currentIndex = index;
  };

  Observer.create({
    type: "wheel,touch,pointer",
    wheelSpeed: -1,
    onDown: () => {
      console.log("Down");
      !animating && gotoSection(currentIndex - 1, -1);
    },
    onUp: () => !animating && gotoSection(currentIndex + 1, 1),
    tolerance: 10,
    preventDefault: true,
  });

  const upButton = document.getElementById("upButton");
  const downButton = document.getElementById("downButton");

  if (!upButton || !downButton) {
    throw new Error("Buttons not found");
  }
  upButton.addEventListener("click", () => {
    !animating && gotoSection(currentIndex - 1, -1);
  });
  downButton.addEventListener("click", () => {
    !animating && gotoSection(currentIndex + 1, 1);
  });

  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  console.log(Number(urlParams.get("page")));
  gotoSection(Number(urlParams.get("page")), -1);
</script>
